/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package mx.itson.spotify.ui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import mx.itson.spotify.db.ConnectionDB;
import mx.itson.spotify.ui.AlbumForm;
import mx.itson.spotify.ui.MenuForm;

/**
 *
 * @author emili
 */
public class ArtistForm extends javax.swing.JDialog {

    /**
     * Creates new form ArtistForm
     */
    public ArtistForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadArtists();
        
        tblArtistManagment.getSelectionModel().addListSelectionListener(e -> {
    int row = tblArtistManagment.getSelectedRow();
    if (row != -1) {
        txtArtistName.setText(tblArtistManagment.getValueAt(row, 0).toString());
        txtGenre.setText(tblArtistManagment.getValueAt(row, 1).toString());
        txtFollowers.setText(tblArtistManagment.getValueAt(row, 2).toString());
    }
});
    }
    private void loadArtists() {
    try {
        Connection connection = ConnectionDB.getConnection();
        Statement statement = connection.createStatement();
        ResultSet resultSet = statement.executeQuery("SELECT * FROM artist");

        DefaultTableModel model = (DefaultTableModel) tblArtistManagment.getModel();
        model.setRowCount(0); // Limpiar tabla

        while (resultSet.next()) {
            String name = resultSet.getString("artistName");
            String genre = resultSet.getString("genre");
            int followers = resultSet.getInt("followers");
            model.addRow(new Object[]{name, genre, followers});
        }

        resultSet.close();
        statement.close();
        connection.close();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error al cargar artistas: " + ex.getMessage());
    }
}
    private int obtenerIdArtistaPorNombre(String nombre) throws SQLException {
    try (Connection conn = ConnectionDB.getConnection();
         PreparedStatement ps = conn.prepareStatement(
             "SELECT artist_id FROM Artist WHERE artistName = ?")) {
        ps.setString(1, nombre);
        ResultSet rs = ps.executeQuery();
        return rs.next() ? rs.getInt(1) : -1;
    }
}

// Limpiar campos despu√©s de eliminar
private void clearArtistFields() {
    txtArtistName.setText("");
    txtGenre.setText("");
    txtFollowers.setText("");
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtArtistName = new javax.swing.JTextField();
        txtGenre = new javax.swing.JTextField();
        txtFollowers = new javax.swing.JTextField();
        btnAlbumManagment = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArtistManagment = new javax.swing.JTable();
        btnAddArtist = new javax.swing.JButton();
        btnDeleteArtist = new javax.swing.JButton();
        btnEditArtist = new javax.swing.JButton();
        btnBackToMenu = new javax.swing.JButton();
        btnDone = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Artist Managment");

        jLabel2.setText("Artistic Name:");

        jLabel3.setText("Genre:");

        jLabel4.setText("Followers:");

        txtArtistName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtArtistNameActionPerformed(evt);
            }
        });

        txtGenre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGenreActionPerformed(evt);
            }
        });

        txtFollowers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFollowersActionPerformed(evt);
            }
        });

        btnAlbumManagment.setText("Album Managment");
        btnAlbumManagment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlbumManagmentActionPerformed(evt);
            }
        });

        tblArtistManagment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Artist Name", "Genre", "Followers"
            }
        ));
        jScrollPane1.setViewportView(tblArtistManagment);

        btnAddArtist.setText("Add");
        btnAddArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddArtistActionPerformed(evt);
            }
        });

        btnDeleteArtist.setText("Delete");
        btnDeleteArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteArtistActionPerformed(evt);
            }
        });

        btnEditArtist.setText("Edit");
        btnEditArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditArtistActionPerformed(evt);
            }
        });

        btnBackToMenu.setText("Back to Menu");
        btnBackToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMenuActionPerformed(evt);
            }
        });

        btnDone.setText("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(btnBackToMenu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAlbumManagment)
                .addGap(47, 47, 47)
                .addComponent(btnDone)
                .addGap(49, 49, 49))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(182, 182, 182)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtArtistName, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnAddArtist))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtGenre, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnDeleteArtist))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(txtFollowers, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnEditArtist))))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(17, 17, 17)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addGap(17, 17, 17)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArtistName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddArtist))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGenre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDeleteArtist))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFollowers, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditArtist))
                .addGap(17, 17, 17)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAlbumManagment)
                    .addComponent(btnBackToMenu)
                    .addComponent(btnDone))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtArtistNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtArtistNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtArtistNameActionPerformed

    private void txtGenreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGenreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGenreActionPerformed

    private void txtFollowersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFollowersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFollowersActionPerformed

    private void btnAddArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddArtistActionPerformed
        try {
        String name = txtArtistName.getText();
        String genre = txtGenre.getText();
        int followers = Integer.parseInt(txtFollowers.getText());

        Connection connection = ConnectionDB.getConnection();
        PreparedStatement statement = connection.prepareStatement("INSERT INTO artist (artistName, genre, followers) VALUES (?, ?, ?)");
        statement.setString(1, name);
        statement.setString(2, genre);
        statement.setInt(3, followers);
        statement.executeUpdate();

        statement.close();
        connection.close();

        loadArtists(); // Actualizar tabla
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error al agregar artista: " + ex.getMessage());
    }

    }//GEN-LAST:event_btnAddArtistActionPerformed

    private void btnDeleteArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteArtistActionPerformed
  
    // Verificar selecci√≥n
    int row = tblArtistManagment.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(
            this, 
            "Selecciona un artista para eliminar.", 
            "Advertencia", 
            JOptionPane.WARNING_MESSAGE
        );
        return;
    }

    // Confirmaci√≥n EXTRA (porque esto borrar√° todo)
    int confirm = JOptionPane.showConfirmDialog(
        this, 
        "CUIDADO \n\nSe eliminar√° el artista, sus √°lbumes y todas sus canciones. \n¬øEst√°s completamente seguro?", 
        "Confirmar eliminaci√≥n", 
        JOptionPane.YES_NO_OPTION,
        JOptionPane.WARNING_MESSAGE
    );
    
    if (confirm != JOptionPane.YES_OPTION) return;

    try (Connection conn = ConnectionDB.getConnection()) {
        conn.setAutoCommit(false); // Iniciar transacci√≥n

        String artistName = tblArtistManagment.getValueAt(row, 0).toString();
        int artistId = obtenerIdArtistaPorNombre(artistName); // M√©todo que debes implementar

        // 1. Primero eliminar todas las canciones de sus √°lbumes
        try (PreparedStatement deleteSongsPs = conn.prepareStatement(
                "DELETE FROM Song WHERE album_id IN (SELECT album_id FROM Album WHERE artist_id = ?)")) {
            deleteSongsPs.setInt(1, artistId);
            deleteSongsPs.executeUpdate();
        }

        // 2. Luego eliminar sus √°lbumes
        try (PreparedStatement deleteAlbumsPs = conn.prepareStatement(
                "DELETE FROM Album WHERE artist_id = ?")) {
            deleteAlbumsPs.setInt(1, artistId);
            deleteAlbumsPs.executeUpdate();
        }

        // 3. Finalmente, eliminar el artista
        try (PreparedStatement deleteArtistPs = conn.prepareStatement(
                "DELETE FROM Artist WHERE artist_id = ?")) {
            deleteArtistPs.setInt(1, artistId);
            int affectedRows = deleteArtistPs.executeUpdate();
            
            if (affectedRows > 0) {
                conn.commit(); // Confirmar cambios si todo sali√≥ bien
                JOptionPane.showMessageDialog(
                    this, 
                    "Artista y todo su contenido eliminados con √©xito.", 
                    "√âxito", 
                    JOptionPane.INFORMATION_MESSAGE
                );
                
                // Actualizar la tabla y limpiar campos
                loadArtists();
                clearArtistFields();
            } else {
                conn.rollback();
                JOptionPane.showMessageDialog(
                    this, 
                    "No se encontr√≥ el artista.", 
                    "Error", 
                    JOptionPane.ERROR_MESSAGE
                );
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(
            this, 
            "Error al eliminar: " + ex.getMessage(), 
            "Error de base de datos", 
            JOptionPane.ERROR_MESSAGE
        );
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(
            this, 
            "Error inesperado: " + ex.getMessage(), 
            "Error", 
            JOptionPane.ERROR_MESSAGE
        );
    }
    }//GEN-LAST:event_btnDeleteArtistActionPerformed

    private void btnEditArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditArtistActionPerformed
        int row = tblArtistManagment.getSelectedRow();
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "Selecciona un artista para editar.");
        return;
    }

    try {
        String oldName = tblArtistManagment.getValueAt(row, 0).toString();

        String newName = txtArtistName.getText();
        String genre = txtGenre.getText();
        int followers = Integer.parseInt(txtFollowers.getText());

        Connection connection = ConnectionDB.getConnection();
        PreparedStatement statement = connection.prepareStatement("UPDATE artist SET artistName = ?, genre = ?, followers = ? WHERE artistName = ?");
        statement.setString(1, newName);
        statement.setString(2, genre);
        statement.setInt(3, followers);
        statement.setString(4, oldName);
        statement.executeUpdate();

        statement.close();
        connection.close();

        loadArtists();
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, "Error al editar artista: " + ex.getMessage());
    }
    }//GEN-LAST:event_btnEditArtistActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        this.dispose(); 
    }//GEN-LAST:event_btnDoneActionPerformed

    private void btnAlbumManagmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlbumManagmentActionPerformed
        this.dispose();
        AlbumForm albumForm = new AlbumForm(new javax.swing.JFrame(), true);
        albumForm.setLocationRelativeTo(null);
        albumForm.setVisible(true);
    }//GEN-LAST:event_btnAlbumManagmentActionPerformed

    private void btnBackToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMenuActionPerformed
        this.dispose(); 
        new MenuForm().setVisible(true);
    }//GEN-LAST:event_btnBackToMenuActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArtistForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArtistForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArtistForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArtistForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ArtistForm dialog = new ArtistForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddArtist;
    private javax.swing.JButton btnAlbumManagment;
    private javax.swing.JButton btnBackToMenu;
    private javax.swing.JButton btnDeleteArtist;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnEditArtist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblArtistManagment;
    private javax.swing.JTextField txtArtistName;
    private javax.swing.JTextField txtFollowers;
    private javax.swing.JTextField txtGenre;
    // End of variables declaration//GEN-END:variables
}
