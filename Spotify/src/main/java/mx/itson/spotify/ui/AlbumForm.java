/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package mx.itson.spotify.ui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import mx.itson.spotify.db.ConnectionDB;
import mx.itson.spotify.entities.Artist;


/**
 *
 * @author emili
 */
public class AlbumForm extends javax.swing.JDialog {

    /**
     * Creates new form AlbumForm
     */
    private DefaultTableModel model;
    private List<Artist> artists; // lista para guardar artistas

    public AlbumForm(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();
    model = (DefaultTableModel) tblAlbumManagment.getModel();
    cargarArtistas();
    cargarAlbums();

    tblAlbumManagment.getSelectionModel().addListSelectionListener(e -> {
        int fila = tblAlbumManagment.getSelectedRow();
        if (fila >= 0) {
            txtAlbumName.setText(model.getValueAt(fila, 0).toString());
            txtAlbumDate.setText(model.getValueAt(fila, 1).toString());
            
            String nombreArtista = model.getValueAt(fila, 2).toString();
            for (int i = 0; i < cmbArtist.getItemCount(); i++) {
                if (cmbArtist.getItemAt(i).equals(nombreArtista)) {
                    cmbArtist.setSelectedIndex(i);
                    break;
                }
            }
        }
    });
}
    private void cargarArtistas() {
         artists = new ArrayList<>();
    cmbArtist.removeAllItems();
    try (Connection con = ConnectionDB.getConnection();
         PreparedStatement ps = con.prepareStatement("SELECT artist_id, artistName FROM Artist");
         ResultSet rs = ps.executeQuery()) {
        while (rs.next()) {
            Artist a = new Artist();
            a.setArtistId(rs.getInt("artist_id"));
            a.setArtistName(rs.getString("artistName"));
            artists.add(a);
            cmbArtist.addItem(a.getArtistName());
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar artistas: " + e.getMessage());
    }

    }

    private void cargarAlbums() {
     model.setRowCount(0); // Usar el modelo de clase en lugar de uno local

    String sql = "SELECT a.albumName, a.albumDate, ar.artistName " +
                 "FROM Album a JOIN Artist ar ON a.artist_id = ar.artist_id";

    try (Connection con = ConnectionDB.getConnection();
         PreparedStatement ps = con.prepareStatement(sql);
         ResultSet rs = ps.executeQuery()) {

        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("albumName"),
                rs.getString("albumDate"),
                rs.getString("artistName")
            });
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al cargar álbumes: " + e.getMessage());
    }

}
    
    
    private Integer obtenerIdAlbumPorNombre(String nombre) {
        Integer id = null;
    try (Connection con = ConnectionDB.getConnection();
         PreparedStatement ps = con.prepareStatement("SELECT album_id FROM Album WHERE albumName = ?")) {
        ps.setString(1, nombre);
        try (ResultSet rs = ps.executeQuery()) {
            if (rs.next()) {
                id = rs.getInt("album_id");
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al obtener id de álbum: " + e.getMessage());
    }
    return id;
}
 
    private void limpiarCampos() {
    txtAlbumName.setText("");
    txtAlbumDate.setText("");
    if (cmbArtist.getItemCount() > 0) {
        cmbArtist.setSelectedIndex(0);  // Selecciona el primer artista por defecto
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtAlbumName = new javax.swing.JTextField();
        txtAlbumDate = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAlbumManagment = new javax.swing.JTable();
        btnSongsManagment = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDone = new javax.swing.JButton();
        btnBackToMenu = new javax.swing.JButton();
        cmbArtist = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Album Managment");

        jLabel3.setText("Album name:");

        jLabel4.setText("Release date:");

        txtAlbumName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAlbumNameActionPerformed(evt);
            }
        });

        txtAlbumDate.setText("aaaa-mm-dd");
        txtAlbumDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAlbumDateActionPerformed(evt);
            }
        });

        tblAlbumManagment.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Album name", "Release Date", "Artist Name"
            }
        ));
        jScrollPane2.setViewportView(tblAlbumManagment);

        btnSongsManagment.setText("Songs Managment");
        btnSongsManagment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSongsManagmentActionPerformed(evt);
            }
        });

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDone.setText("Done");
        btnDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoneActionPerformed(evt);
            }
        });

        btnBackToMenu.setText("Back to menu");
        btnBackToMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackToMenuActionPerformed(evt);
            }
        });

        cmbArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbArtistActionPerformed(evt);
            }
        });

        jLabel2.setText("Select an artist:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbArtist, 0, 268, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAlbumDate)
                            .addComponent(txtAlbumName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(btnEdit))
                .addGap(33, 33, 33))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(171, 171, 171)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(btnBackToMenu)
                .addGap(45, 45, 45)
                .addComponent(btnSongsManagment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(btnDone)
                .addGap(45, 45, 45))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnDelete))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAlbumName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtAlbumDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(btnEdit)
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSongsManagment)
                            .addComponent(btnDone)
                            .addComponent(btnBackToMenu))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        String nombre = txtAlbumName.getText().trim();
    String fecha = txtAlbumDate.getText().trim();
    
    if (nombre.isEmpty() || fecha.isEmpty() || cmbArtist.getSelectedIndex() < 0) {
        JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos.");
        return;
    }

    Artist artistaSeleccionado = artists.get(cmbArtist.getSelectedIndex());

    try (Connection con = ConnectionDB.getConnection();
         PreparedStatement ps = con.prepareStatement(
             "INSERT INTO Album (albumName, albumDate, artist_id) VALUES (?, ?, ?)")) {
        
        ps.setString(1, nombre);
        ps.setString(2, fecha);
        ps.setInt(3, artistaSeleccionado.getArtistId());
        ps.executeUpdate();
        
        JOptionPane.showMessageDialog(this, "Álbum agregado correctamente.");
        cargarAlbums();
        limpiarCampos();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al agregar álbum: " + e.getMessage());
    }

    
    
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int fila = tblAlbumManagment.getSelectedRow();
        if (fila < 0) {
            JOptionPane.showMessageDialog(this, "Selecciona un álbum para eliminar.");
            return;
        }

        String nombreAlbum = (String) model.getValueAt(fila, 0);
        Integer idAlbum = obtenerIdAlbumPorNombre(nombreAlbum);
        if (idAlbum == null) {
            JOptionPane.showMessageDialog(this, "No se encontró el álbum seleccionado.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "¿Seguro que quieres eliminar este álbum?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (confirm != JOptionPane.YES_OPTION) return;

        try (Connection con = ConnectionDB.getConnection();
             PreparedStatement ps = con.prepareStatement("DELETE FROM album WHERE id = ?")) {
            ps.setInt(1, idAlbum);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(this, "Álbum eliminado correctamente.");
            cargarAlbums();
            limpiarCampos();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error al eliminar álbum: " + e.getMessage());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
     int fila = tblAlbumManagment.getSelectedRow();
    if (fila < 0) {
        JOptionPane.showMessageDialog(this, "Selecciona un álbum para editar.");
        return;
    }

    String nombreOriginal = model.getValueAt(fila, 0).toString();
    Integer idAlbum = obtenerIdAlbumPorNombre(nombreOriginal);
    
    if (idAlbum == null) {
        JOptionPane.showMessageDialog(this, "No se encontró el álbum seleccionado.");
        return;
    }

    String nuevoNombre = txtAlbumName.getText().trim();
    String nuevaFecha = txtAlbumDate.getText().trim();
    
    if (nuevoNombre.isEmpty() || nuevaFecha.isEmpty() || cmbArtist.getSelectedIndex() < 0) {
        JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos.");
        return;
    }

    Artist artista = artists.get(cmbArtist.getSelectedIndex());

    try (Connection con = ConnectionDB.getConnection();
         PreparedStatement ps = con.prepareStatement(
             "UPDATE Album SET albumName = ?, albumDate = ?, artist_id = ? WHERE album_id = ?")) {
        
        ps.setString(1, nuevoNombre);
        ps.setString(2, nuevaFecha);
        ps.setInt(3, artista.getArtistId());
        ps.setInt(4, idAlbum);
        ps.executeUpdate();
        
        JOptionPane.showMessageDialog(this, "Álbum actualizado correctamente.");
        cargarAlbums();
        limpiarCampos();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al actualizar álbum: " + e.getMessage());

        
    }//GEN-LAST:event_btnEditActionPerformed
}
    
    
      
    

    
 

    private void txtAlbumNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAlbumNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAlbumNameActionPerformed

    private void cmbArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbArtistActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbArtistActionPerformed

    private void txtAlbumDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAlbumDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAlbumDateActionPerformed

    private void btnBackToMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackToMenuActionPerformed
        this.dispose();             // Cierra el formulario actual
        MenuForm menu = new MenuForm(); // Instancia el menú principal
        menu.setVisible(true);      // Lo muestra                                         
    }//GEN-LAST:event_btnBackToMenuActionPerformed

    private void btnSongsManagmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSongsManagmentActionPerformed
        this.dispose();
        SongForm songForm = new SongForm((java.awt.Frame) SwingUtilities.getWindowAncestor(this), true);
        songForm.setVisible(true);
    
    }//GEN-LAST:event_btnSongsManagmentActionPerformed

    private void btnDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoneActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnDoneActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlbumForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlbumForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlbumForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlbumForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AlbumForm dialog = new AlbumForm(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnBackToMenu;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDone;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSongsManagment;
    private javax.swing.JComboBox<String> cmbArtist;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblAlbumManagment;
    private javax.swing.JTextField txtAlbumDate;
    private javax.swing.JTextField txtAlbumName;
    // End of variables declaration//GEN-END:variables
}
